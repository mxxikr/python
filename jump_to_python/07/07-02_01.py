# 메타 문자 : 그 문자가 가진 뜻이 아닌 특별한 용도로 사용하는 문자
# . ^ $ * + ? { } [ ] \ | ( ) 정규 표현식에 메타 문자 사용시 의미를 갖게 됨
    # \d : 숫자와 매치 = [0-9] 
    # \D : 숫자가 아닌 것과 매치 = [^0-9]
    # \s : whitespace 문자와 매치 = [ \t\n\r\f\v] -> 빈칸은 공백문자(space)
    # \S : whitespace 문자가 아닌것과 매치 = [^ \t\n\r\f\v] 
    # \w : 문자 + 숫자와 매치 = [a-zA-Z0-9_]
    # \W : 문자 + 숫자가 아닌 문자와 매치 = [^a-zA-Z0-9_]

# 문자 클래스 [] : []로 만들어진 정규식 의미 ->  [] 사이의 문자들과 매치
    # 메타 문자인 [] 사이에는 어떤 문자도 들어갈 수 O
    # 문자 클래스 안에 ^ 메타 문자 사용시 반대 의미(not)
    # []안의 두 문자 사이에 하이픈(-) 사용시 두문자 사이의 범위를 뜻함
        # 정규표현식 [abc] -> "a, b, c 중 한개의 문자와 매치"
        # 정규표현식 [a-c] -> [abc]와 동일 , [a-zA-Z] -> 알파벳 모두
        # 정규표현식[^0-9] -> 숫자가 아닌 문자만 매치

# Dot(.) : \n을 제외한 모든 문자와 매치 -> re.DOTALL 사용시  \n과 매치 가능
    #a.b -> "a + 모든 문자 + b" -> a와 b 사이에 어떤 문자가 들어가도 모두 매치
            #aab -> ab사이에 a 문자 -> 정규식 매치
            #a0b -> ab사이에 0 문자 -> 정규식 매치
            #abc -> ab사이에 문자 X -> 정규식 매치 X
    #a[.]b -> "a + Dot(.)문자 + b" -> "a.b"문자열과 매치 "a0b"문자열과 매치X

# 반복(*) : * 바로 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미 ->메모리 제한으로 2억개정도만 가능
    #ca*t : ct 문자열 매치 -> "a"가 0번 반복되어 매치
            #cat 문자열 매치 -> "a"가 1번 반복되어 매치
            #caat 문자열 매치 -> "a"가 3번 반복되어 매치

# 반복(+) : + 바로 앞에 있는 문자가 최소 1번이상 반복될때 사용(반복횟수 1번이상)
    #ca+t : ct 문자열 매치 -> "a"가 0번 반복되어 매치 X
            #cat 문자열 매치 -> "a"가 1번 반복되어 매치
            #caat 문자열 매치 -> "a"가 3번 반복되어 매치

# 반복({m,n}, ?) :반복회수를 제한하고 싶을 때 {} 사용시 반복횟수 고정 사용
    #{3,} : 반복 횟수가 3 이상인 경우 (생략된 n은 무한대의미)
    #{,3} : 반복 횟수가 3 이하인 경우 (생략된 m은 0과 동일)
        # {1,} = +
        # {0,} = *
    # {m}
        # ca{2}t : "c + a(반드시 2번 반복) + t"
            #cat -> "a"가 1번 반복되어 매치 X
            #caat -> "a"가 2번 반복되어 매치
    # {m, n}
        # ca{2,5}t : "c + a(2~5회 반복) + t"
            #cat -> "a"가 1번 반복되어 매치 X
            #caat -> "a"가 2번 반복되어 매치 
            #caaaaat -> "a"가 5번 반복되어 매치 

# ? : 반복과 비슷한 개념, {0,1}의미
    #ab?c : "a + b(있어도 되고 없어도 됨) + c"
        #abc : "b"가 1번 사용되어 매치
        #ac : "b"가 0번 사용되어 매치